/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.MenuItemsDao;
import dao.OrderItemsDao;
import dao.OrdersDao;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customers;
import model.MenuItems;
import model.OrderItems;
import model.Orders;

/**
 *
 * @author Gisabo
 */
public class MenuItemsPanel extends javax.swing.JFrame {

    /**
     * Creates new form MenuItemsPanel
     */
  private List<String> customerNames;  // Only customer names



    public MenuItemsPanel() {
        initComponents();
         
       setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        
         loadMenuItems();
    }
    
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        comboCategory = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        lblItemId = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblAvailability = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        txtItemId = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtDescription = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        cmbAvailability = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        cmbCategory = new javax.swing.JComboBox<>();
        btnGoToOrders = new javax.swing.JButton();
        btnGoToMain = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 253, 245));

        jLabel1.setText("MENU MANAGEMENT");

        lblSearch.setText("Search");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item Id", "Name", "Description", "Price", "Availability", "Category"
            }
        ));
        tblMenu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMenuMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblMenu);

        comboCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Food", "Drinks", "Dessert" }));

        jLabel2.setText("Filter");

        lblItemId.setText("Item ID");

        lblName.setText("Name");

        lblDescription.setText("Description");

        lblPrice.setText("Price");

        lblAvailability.setText("Availabilty");

        lblCategory.setText("Category");

        cmbAvailability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Not Availablle" }));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food", "Drink", "Dessert", " " }));

        btnGoToOrders.setText("Go to Orders");
        btnGoToOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToOrdersActionPerformed(evt);
            }
        });

        btnGoToMain.setText("Go to Main Page");
        btnGoToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToMainActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\gh\\Documents\\NetBeansProjects\\RestaurantReservationAndOrderingSystem\\src\\Images\\menu_11661820.png")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 784, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblSearch)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(71, 71, 71)
                                        .addComponent(btnSearch))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49)
                                        .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(220, 220, 220)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAdd)
                                        .addGap(56, 56, 56)
                                        .addComponent(btnUpdate)
                                        .addGap(36, 36, 36)
                                        .addComponent(btnDelete))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblItemId)
                                            .addComponent(lblName)
                                            .addComponent(lblDescription)
                                            .addComponent(lblPrice)
                                            .addComponent(lblCategory)
                                            .addComponent(lblAvailability))
                                        .addGap(208, 208, 208)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtItemId)
                                            .addComponent(txtName)
                                            .addComponent(txtDescription)
                                            .addComponent(txtPrice)
                                            .addComponent(cmbAvailability, 0, 1, Short.MAX_VALUE)
                                            .addComponent(cmbCategory, 0, 128, Short.MAX_VALUE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addComponent(btnGoToOrders)
                                .addGap(49, 49, 49)
                                .addComponent(btnGoToMain)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearch))
                        .addGap(42, 42, 42)
                        .addComponent(btnSearch)
                        .addGap(92, 92, 92)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemId)
                    .addComponent(txtItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescription)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAvailability)
                    .addComponent(cmbAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCategory)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGoToOrders)
                    .addComponent(btnGoToMain))
                .addContainerGap(553, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearch.getText().trim();
    
    if (keyword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a food name or category to search.");
        return;
    }
    
    try {
          // Database connection (directly here)
            String DB_URL = "jdbc:mysql://localhost:3306/ restaurant_ordering_system_db"; // replace with your DB URL
            String DB_USER = "root"; // replace with your DB username
            String DB_PASSWORD = "gadiella"; // replace with your DB password

            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = "SELECT item_id, name, description, price, availability, category FROM menu_items WHERE name LIKE ? OR category LIKE ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        
        String searchPattern = "%" + keyword + "%";
        stmt.setString(1, searchPattern);
        stmt.setString(2, searchPattern);
        
        ResultSet rs = stmt.executeQuery();
        
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        model.addColumn("Item ID");
        model.addColumn("Name");
        model.addColumn("Description");
        model.addColumn("Price");
        model.addColumn("Availability");
        model.addColumn("Category");
        
        while (rs.next()) {
            int itemId = rs.getInt("item_id");
            String name = rs.getString("name");
            String description = rs.getString("description");
            double price = rs.getDouble("price");
            String formattedPrice = String.format("$%.2f", price);
            boolean availability = rs.getBoolean("availability");
            String category = rs.getString("category");
            
            model.addRow(new Object[]{
                itemId,
                name,
                description,
                formattedPrice,
                availability ? "Available" : "Not Available",
                category
            });
        }
        
        tblMenu.setModel(model);
        
        rs.close();
        stmt.close();
        conn.close();
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Failed to search menu items: " + e.getMessage());
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMenuMouseClicked
        // TODO add your handling code here:
          int selectedRow = tblMenu.getSelectedRow();
    if (selectedRow >= 0) {
        txtItemId.setText(tblMenu.getValueAt(selectedRow, 0).toString());
        txtName.setText(tblMenu.getValueAt(selectedRow, 1).toString());
        txtDescription.setText(tblMenu.getValueAt(selectedRow, 2).toString());
        txtPrice.setText(tblMenu.getValueAt(selectedRow, 3).toString());
        
        cmbAvailability.setSelectedItem(tblMenu.getValueAt(selectedRow, 4).toString());
        cmbCategory.setSelectedItem(tblMenu.getValueAt(selectedRow, 5).toString());
    }
    }//GEN-LAST:event_tblMenuMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        try {
        MenuItems item = new MenuItems();
        item.setName(txtName.getText());
        item.setDescription(txtDescription.getText());
        item.setPrice(Double.parseDouble(txtPrice.getText()));
        item.setAvailability(cmbAvailability.getSelectedItem().toString().equals("Available"));
        item.setCategory(cmbCategory.getSelectedItem().toString());

        MenuItemsDao dao = new MenuItemsDao();
       int rowsAffected = dao.addMenuItem(item);
if (rowsAffected > 0) {
    JOptionPane.showMessageDialog(this, "Menu Item Added Successfully!");
    loadMenuItems();
    clearForm();
} else {
    JOptionPane.showMessageDialog(this, "Failed to add Menu Item!");
}

    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        try {
        if (txtItemId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a menu item to update.");
            return;
        }

        MenuItems item = new MenuItems();
        item.setItemId(Integer.parseInt(txtItemId.getText()));
        item.setName(txtName.getText());
        item.setDescription(txtDescription.getText());
        item.setPrice(Double.parseDouble(txtPrice.getText()));
        item.setAvailability(cmbAvailability.getSelectedItem().toString().equals("Available"));
        item.setCategory(cmbCategory.getSelectedItem().toString());

        MenuItemsDao dao = new MenuItemsDao();
       
        int rowsAffected = dao.updateMenuItem(item);
if (rowsAffected > 0) {
    JOptionPane.showMessageDialog(this, "Menu Item Updated Successfully!");
    loadMenuItems();  // Refresh the table
    clearForm();      // Clear input fields
} else {
    JOptionPane.showMessageDialog(this, "Failed to update Menu Item!");
}

    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         try {
        if (txtItemId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a menu item to delete.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int itemId = Integer.parseInt(txtItemId.getText());
            MenuItemsDao dao = new MenuItemsDao();
           int rowsAffected = dao.deleteMenuItem(itemId);
if (rowsAffected > 0) {
    JOptionPane.showMessageDialog(this, "Menu Item Deleted Successfully!");
    loadMenuItems();  // Refresh table
    clearForm();      // Clear input fields
} else {
    JOptionPane.showMessageDialog(this, "Failed to delete Menu Item!");
}

        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnGoToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToMainActionPerformed
        // TODO add your handling code here:
          int choice = JOptionPane.showConfirmDialog(this, "Return to Main Menu?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        MainMenuFrame mainMenu = new MainMenuFrame(); // or MainMenuFrame(role) if needed
        mainMenu.setVisible(true);
        this.dispose(); // Close current panel
    }
    }//GEN-LAST:event_btnGoToMainActionPerformed

    private void btnGoToOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToOrdersActionPerformed
        // TODO add your handling code here:
          int choice = JOptionPane.showConfirmDialog(this, "Go to Orders Page?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        OrdersPanel ordersFrame = new OrdersPanel();
        ordersFrame.setVisible(true);
        this.dispose();
    }
    }//GEN-LAST:event_btnGoToOrdersActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void clearForm() {
    txtItemId.setText("");
    txtName.setText("");
    txtDescription.setText("");
    txtPrice.setText("");
    cmbAvailability.setSelectedIndex(0);
    cmbCategory.setSelectedIndex(0);
}

    
    private void loadMenuItems() {
    try {
        MenuItemsDao dao = new MenuItemsDao();
        List<MenuItems> menuItems = dao.getAllMenuItems();
        
        DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
        model.setRowCount(0); // Clear table
        
        for (MenuItems item : menuItems) {
            model.addRow(new Object[]{
                item.getItemId(),
                item.getName(),
                item.getDescription(),
                item.getPrice(),
                item.isAvailability() ? "Available" : "Not Available",
                item.getCategory()
            });
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

    
    

    
    private void handleOrder() {
        int selectedRow = tblMenu.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a menu item to order.");
            return;
        }

        int itemId = (int) tblMenu.getValueAt(selectedRow, 0);
        String itemName = tblMenu.getValueAt(selectedRow, 1).toString();
        String availability = tblMenu.getValueAt(selectedRow, 4).toString();

        if (!availability.equalsIgnoreCase("Available")) {
            JOptionPane.showMessageDialog(this, itemName + " is currently not available.");
            return;
        }

        String input = JOptionPane.showInputDialog(this, "Enter quantity for " + itemName + ":");

        if (input != null) {
            try {
                int quantity = Integer.parseInt(input);

                if (quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity must be at least 1.");
                    return;
                }

                JOptionPane.showMessageDialog(this, "You have ordered " + quantity + " x " + itemName + ".");

                // Call OrderDao to store order if needed
                // new OrderDao().addOrder(new Order(...));

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid quantity entered.");
            }
        }
}
  
  
  
/* private void fillCustomerComboBox() {
       DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
        comboBoxModel.addElement("Select Customer");

        for (String name : customerNames) {
            comboBoxModel.addElement(name);
        }
        cmbCustomer.setModel(comboBoxModel);
    }




 
public Customers getSelectedCustomer() {
    return (Customers) cmbCustomer.getSelectedItem();
}

 private int fetchCustomerIdByName(String name) {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_ordering_system_db", "root", "gadiella")) {
            PreparedStatement ps = conn.prepareStatement("SELECT customer_id FROM customers WHERE name = ?");
            ps.setString(1, name);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt("customer_id");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return -1;
    }*/
















    
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MenuItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MenuItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MenuItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MenuItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//           
//
//        new MenuItemsPanel().setVisible(true);
//        }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGoToMain;
    private javax.swing.JButton btnGoToOrders;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbAvailability;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> comboCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAvailability;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblItemId;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtItemId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
