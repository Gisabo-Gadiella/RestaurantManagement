/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.border.LineBorder;
import java.awt.Color;
import com.toedter.calendar.JDateChooser; // Import JDateChooser
import dao.CustomerDao;
import dao.ReservationDao;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import model.CombItem;
import model.Customers;
import model.Reservation;


/**
 *
 * @author Gisabo
 */
public class ReservationPanel extends javax.swing.JFrame {

    /**
     * Creates new form ReservationPanel
     */
    private List<Customers> customersList = new ArrayList<>();
    // HashMap to connect names to IDs
private HashMap<String, Integer> customerNameToIdMap = new HashMap<>();

   

    public ReservationPanel() {

        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
         // Disable past dates
    disablePastDates();
        tblReservationsMouseClicked();
        populateCustomerComboBox();
        loadReservationTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTimeChooser1 = new lu.tudor.santec.jtimechooser.JTimeChooser();
        jPanel1 = new javax.swing.JPanel();
        btnGoToMenu = new javax.swing.JButton();
        btnGoToMain = new javax.swing.JButton();
        scrollReservations = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReservations = new javax.swing.JTable();
        btnClearFields = new javax.swing.JButton();
        btnUpdateReservation = new javax.swing.JButton();
        btnDeleteReservation = new javax.swing.JButton();
        btnAddReservation = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        lblPartySize = new javax.swing.JLabel();
        spinnerPartySize = new javax.swing.JSpinner();
        lblReservationDateTime = new javax.swing.JLabel();
        dateChooserReservationDateTime = new com.toedter.calendar.JDateChooser();
        timeChooserReservationTime = new lu.tudor.santec.jtimechooser.JTimeChooser();
        lblCustomerId = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        lblReservationId = new javax.swing.JLabel();
        txtReservationId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 250, 182));

        jPanel1.setBackground(new java.awt.Color(153, 203, 176));

        btnGoToMenu.setText("Go to Menu ");
        btnGoToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToMenuActionPerformed(evt);
            }
        });

        btnGoToMain.setText("Go to Main page");
        btnGoToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToMainActionPerformed(evt);
            }
        });

        tblReservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Reservation Id", "Customer Id", "Date and Time", "Party Size", "Status"
            }
        ));
        tblReservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReservationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReservations);

        scrollReservations.setViewportView(jScrollPane1);

        btnClearFields.setText("Clear");
        btnClearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFieldsActionPerformed(evt);
            }
        });

        btnUpdateReservation.setText("Update");
        btnUpdateReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReservationActionPerformed(evt);
            }
        });

        btnDeleteReservation.setText("Delete");
        btnDeleteReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReservationActionPerformed(evt);
            }
        });

        btnAddReservation.setText("Add");
        btnAddReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddReservationActionPerformed(evt);
            }
        });

        lblStatus.setText("Status");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Confirmed", "Cancelled" }));

        lblPartySize.setText("Party Size");

        lblReservationDateTime.setText("Reservation date and time");

        lblCustomerId.setText("Customer Id");

        cmbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblReservationId.setText("Reservation Id");

        txtReservationId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReservationIdActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 218, 189));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("RESERVATION PANEL");

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\gh\\Documents\\NetBeansProjects\\RestaurantReservationAndOrderingSystem\\src\\Images\\calendar_6794792.png")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblReservationId, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblReservationDateTime)
                            .addComponent(lblPartySize, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAddReservation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateReservation)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(btnDeleteReservation)
                                .addGap(18, 18, 18)
                                .addComponent(btnClearFields))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtReservationId, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinnerPartySize, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(69, 69, 69))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateChooserReservationDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(timeChooserReservationTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(scrollReservations, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGoToMain)
                    .addComponent(btnGoToMenu))
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblReservationId)
                            .addComponent(txtReservationId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustomerId))
                        .addGap(53, 53, 53)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblReservationDateTime)
                    .addComponent(dateChooserReservationDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeChooserReservationTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGoToMenu)
                        .addGap(48, 48, 48)
                        .addComponent(btnGoToMain)
                        .addGap(94, 94, 94))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPartySize, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerPartySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStatus)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddReservation)
                            .addComponent(btnUpdateReservation)
                            .addComponent(btnDeleteReservation)
                            .addComponent(btnClearFields))
                        .addGap(63, 63, 63)
                        .addComponent(scrollReservations, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReservationActionPerformed
        // TODO add your handling code here:
          int selectedRow = tblReservations.getSelectedRow();
    if (selectedRow >= 0) {
        try {
            // 1. Get Reservation ID
            int reservationId = Integer.parseInt(txtReservationId.getText());

            // 2. Get Selected Customer Name
            String selectedCustomerName = (String) cmbCustomer.getSelectedItem();
            if (selectedCustomerName == null || !customerNameToIdMap.containsKey(selectedCustomerName)) {
                JOptionPane.showMessageDialog(this, "Please select a valid customer.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int customerId = customerNameToIdMap.get(selectedCustomerName);

           // Reservation Date
        Date reservationDate = dateChooserReservationDateTime.getDate();
        if (reservationDate == null) {
            JOptionPane.showMessageDialog(this, "Please select a reservation date.");
            return;
        }

        // Reservation Time
        Date reservationTime = timeChooserReservationTime.getDateWithTime(reservationDate);
        if (reservationTime == null) {
            JOptionPane.showMessageDialog(this, "Please select a reservation time.");
            return;
        }

            // 4. Get Party Size
            int partySize = (int) spinnerPartySize.getValue();

            // 5. Get Status
            String status = (String) cmbStatus.getSelectedItem();

            // 6. Create a Reservation object
            Reservation reservation = new Reservation();
            reservation.setReservationId(reservationId);
            reservation.setCustomerId(customerId);
            reservation.setReservationDatetime(new Timestamp(reservationTime.getTime())); // careful here too!
            reservation.setPartySize(partySize);
            reservation.setStatus(status);

            // 7. Call DAO to update
            ReservationDao reservationDao = new ReservationDao();
           int rowsAffected = reservationDao.updateReservation(reservation);
if (rowsAffected > 0) {
    JOptionPane.showMessageDialog(this, "Reservation updated successfully!");
    loadReservationTable();
} else {
    JOptionPane.showMessageDialog(this, "Failed to update reservation.", "Error", JOptionPane.ERROR_MESSAGE);
}


        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a reservation to update.", "Warning", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_btnUpdateReservationActionPerformed

    private void btnAddReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddReservationActionPerformed
        // TODO add your handling code here:
        
      try {
           if (!validateDateTime()) {
            return;
        }
          
        String selectedCustomerName = (String) cmbCustomer.getSelectedItem();
        if (selectedCustomerName == null || !customerNameToIdMap.containsKey(selectedCustomerName)) {
            JOptionPane.showMessageDialog(this, "Please select a valid Customer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int customerId = customerNameToIdMap.get(selectedCustomerName);

        Date datePart = dateChooserReservationDateTime.getDate();
        if (datePart == null) {
            JOptionPane.showMessageDialog(this, "Please select a reservation date.");
            return;
        }

        Date fullDateTime = timeChooserReservationTime.getDateWithTime(datePart);
        Timestamp finalDateTime = new Timestamp(fullDateTime.getTime());

        int partySize = (Integer) spinnerPartySize.getValue();
        if (partySize <= 0) {
            JOptionPane.showMessageDialog(this, "Party size must be at least 1.");
            return;
        }

        String status = (String) cmbStatus.getSelectedItem();
        if (status == null || status.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a reservation status.");
            return;
        }

        Reservation reservation = new Reservation(0, customerId, finalDateTime, partySize, status);

        ReservationDao reservationDAO = new ReservationDao();
        int result = reservationDAO.createReservation(reservation);

        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Reservation added successfully!");
            loadReservationTable();
            clearReservationFields();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add reservation.");
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
    }
    }//GEN-LAST:event_btnAddReservationActionPerformed

    private void btnDeleteReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReservationActionPerformed
        // TODO add your handling code here:
       try {
        String reservationIdStr = txtReservationId.getText().trim();
        
        if (reservationIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a reservation to delete.");
            return;
        }

        int reservationId = Integer.parseInt(reservationIdStr);

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this reservation?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            ReservationDao dao = new ReservationDao();
            int result = dao.deleteReservation(reservationId);

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Reservation deleted successfully!");
                loadReservationTable();
                clearReservationFields();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete reservation.");
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_btnDeleteReservationActionPerformed

    private void btnClearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFieldsActionPerformed
        // TODO add your handling code here:
          clearReservationFields();  // Clear all the fields
    }//GEN-LAST:event_btnClearFieldsActionPerformed

    private void tblReservationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReservationsMouseClicked
        // TODO add your handling code here:
       int selectedRow = tblReservations.getSelectedRow();
    if (selectedRow >= 0) {
        // Reservation ID
        int reservationId = (int) tblReservations.getValueAt(selectedRow, 0);
        txtReservationId.setText(String.valueOf(reservationId));

        // Customer ID
        int customerId = (int) tblReservations.getValueAt(selectedRow, 1);

        // Find the matching customer name from HashMap
        for (Map.Entry<String, Integer> entry : customerNameToIdMap.entrySet()) {
            if (entry.getValue() == customerId) {
                cmbCustomer.setSelectedItem(entry.getKey());
                break;
            }
        }

        // Reservation DateTime
        Timestamp reservationDateTime = (Timestamp) tblReservations.getValueAt(selectedRow, 2);

        // Set Date (only date part)
        dateChooserReservationDateTime.setDate(new Date(reservationDateTime.getTime()));

        // Set Time (only time part)
        if (timeChooserReservationTime != null) {
            timeChooserReservationTime.setTime(new Date(reservationDateTime.getTime()));
        }

        // Party Size
        int partySize = (int) tblReservations.getValueAt(selectedRow, 3);
        spinnerPartySize.setValue(partySize);

        // Status
        String status = (String) tblReservations.getValueAt(selectedRow, 4);
        cmbStatus.setSelectedItem(status);
    }
    }//GEN-LAST:event_tblReservationsMouseClicked

    private void btnGoToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToMainActionPerformed
        // TODO add your handling code here:
          int choice = JOptionPane.showConfirmDialog(this, "Return to Main Menu?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        MainMenuFrame mainMenu = new MainMenuFrame(); // or MainMenuFrame(role) if needed
        mainMenu.setVisible(true);
        this.dispose(); // Close current panel
    }
    }//GEN-LAST:event_btnGoToMainActionPerformed

    private void btnGoToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToMenuActionPerformed
        // TODO add your handling code here:
         int choice = JOptionPane.showConfirmDialog(this, "Go to Menu Page?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        MenuItemsPanel menuFrame = new MenuItemsPanel();
        menuFrame.setVisible(true);
        this.dispose();
    }
    }//GEN-LAST:event_btnGoToMenuActionPerformed

    private void txtReservationIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReservationIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReservationIdActionPerformed

    
      private void tblReservationsMouseClicked() {                                              
     int selectedRow = tblReservations.getSelectedRow();
    if (selectedRow != -1) {
        // Reservation ID
        int reservationId = (int) tblReservations.getValueAt(selectedRow, 0);
        txtReservationId.setText(String.valueOf(reservationId));

        // Customer ID
        int customerId = (int) tblReservations.getValueAt(selectedRow, 1);
        cmbCustomer.setSelectedItem(String.valueOf(customerId));

        // Reservation DateTime
        Timestamp reservationDateTime = (Timestamp) tblReservations.getValueAt(selectedRow, 2);
        
        // Split into date and time parts
        dateChooserReservationDateTime.setDate(new Date(reservationDateTime.getTime())); // For date part
        
        // Now for time
        if (timeChooserReservationTime != null) {
            timeChooserReservationTime.setTime(new Date(reservationDateTime.getTime())); // Set time
        }

        // Party Size
        int partySize = (int) tblReservations.getValueAt(selectedRow, 3);
        spinnerPartySize.setValue(partySize);

        // Status
        String status = (String) tblReservations.getValueAt(selectedRow, 4);
        cmbStatus.setSelectedItem(status);
    }
}

    private void disablePastDates() {
    Date today = new Date();
    dateChooserReservationDateTime.setMinSelectableDate(today);
}

    
    private void clearReservationFields() {
    txtReservationId.setText("");  // Clear Reservation ID field
    cmbCustomer.setSelectedIndex(-1);  // Clear Customer ID selection
    timeChooserReservationTime.setTime(new Date());  // Reset DateTime Picker
    spinnerPartySize.setValue(1);  // Reset Party Size
    cmbStatus.setSelectedIndex(-1);  // Clear Status selection
}

   private void loadReservationTable() {
       ReservationDao reservationDao = new ReservationDao();
    List<Reservation> reservations = reservationDao.getAllReservations();

    DefaultTableModel model = (DefaultTableModel) tblReservations.getModel();
    model.setRowCount(0); // clear table first

    for (Reservation res : reservations) {
        model.addRow(new Object[]{
            res.getReservationId(),
            res.getCustomerId(), // id will show here
            res.getReservationDatetime(),
            res.getPartySize(),
            res.getStatus()
        });
    }
    
}

private boolean validateDateTime() {
    Date selectedDate = dateChooserReservationDateTime.getDate();
    if (selectedDate == null) {
        JOptionPane.showMessageDialog(this, "Please select a reservation date.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    Date selectedTime = timeChooserReservationTime.getDateWithTime(selectedDate);
    if (selectedTime == null) {
        JOptionPane.showMessageDialog(this, "Please select a reservation time.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    Timestamp now = new Timestamp(System.currentTimeMillis());

    if (selectedTime.before(now)) {
        JOptionPane.showMessageDialog(this, "Reservation must be for a future date and time.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    return true; // everything is valid
}

    

private void populateCustomerComboBox() {
    CustomerDao customerDao = new CustomerDao();
    customersList = customerDao.getAllCustomers(); // <-- FILL customersList!

    cmbCustomer.removeAllItems(); // clear combo box
    customerNameToIdMap.clear(); // clear the map too

    for (Customers customer : customersList) {
        cmbCustomer.addItem(customer.getName()); // add name
        customerNameToIdMap.put(customer.getName(), customer.getCustomerId()); // map name to id
    }
}



   
private int getSelectedCustomerId() {
    int selectedIndex = cmbCustomer.getSelectedIndex();
    if (selectedIndex > 0) {  // Skip the "Select Customer" prompt
        Customers selectedCustomer = customersList.get(selectedIndex - 1);  // Adjust for the prompt item
        return selectedCustomer.getCustomerId();
    }
    return -1;  // Return -1 for invalid selection
}



 

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ReservationPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ReservationPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ReservationPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ReservationPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ReservationPanel().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddReservation;
    private javax.swing.JButton btnClearFields;
    private javax.swing.JButton btnDeleteReservation;
    private javax.swing.JButton btnGoToMain;
    private javax.swing.JButton btnGoToMenu;
    private javax.swing.JButton btnUpdateReservation;
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser dateChooserReservationDateTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private lu.tudor.santec.jtimechooser.JTimeChooser jTimeChooser1;
    private javax.swing.JLabel lblCustomerId;
    private javax.swing.JLabel lblPartySize;
    private javax.swing.JLabel lblReservationDateTime;
    private javax.swing.JLabel lblReservationId;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JScrollPane scrollReservations;
    private javax.swing.JSpinner spinnerPartySize;
    private javax.swing.JTable tblReservations;
    private lu.tudor.santec.jtimechooser.JTimeChooser timeChooserReservationTime;
    private javax.swing.JTextField txtReservationId;
    // End of variables declaration//GEN-END:variables

   
}
