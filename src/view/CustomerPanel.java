/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customers;

/**
 *
 * @author Gisabo
 */
public class CustomerPanel extends javax.swing.JFrame {
     private List<Customers> customersList = new ArrayList<>();
  

    /**
     * Creates new form CustomerPanel
     */
     
     
    public CustomerPanel() {
        initComponents();
        
      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
         loadCustomerData();
         customersList = new ArrayList<>(); // Initialize the list
         
         
         
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCustomer = new javax.swing.JPanel();
        lblCustomerTitle = new javax.swing.JLabel();
        lblCustomerName = new javax.swing.JLabel();
        lblCustomerEmail = new javax.swing.JLabel();
        lblCustomerPhone = new javax.swing.JLabel();
        lblCustomerGender = new javax.swing.JLabel();
        txtCustomerName = new javax.swing.JTextField();
        txtCustomerEmail = new javax.swing.JTextField();
        txtCustomerPhone = new javax.swing.JTextField();
        cmbCustomerGender = new javax.swing.JComboBox<>();
        btnAddCustomer = new javax.swing.JButton();
        btnUpdateCustomer = new javax.swing.JButton();
        btnDeleteCustomer = new javax.swing.JButton();
        btnSearchCustomer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtSearchCustomer = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnGoToReservation = new javax.swing.JButton();
        btnGoToMain = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlCustomer.setBackground(new java.awt.Color(255, 225, 195));

        lblCustomerTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblCustomerTitle.setText("Customer Management");

        lblCustomerName.setText("Name");

        lblCustomerEmail.setText("Email");

        lblCustomerPhone.setText("Phone number");

        lblCustomerGender.setText("Gender");

        txtCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNameActionPerformed(evt);
            }
        });

        cmbCustomerGender.setBackground(new java.awt.Color(204, 238, 255));
        cmbCustomerGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other", " " }));
        cmbCustomerGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerGenderActionPerformed(evt);
            }
        });

        btnAddCustomer.setBackground(new java.awt.Color(102, 108, 105));
        btnAddCustomer.setForeground(new java.awt.Color(255, 255, 255));
        btnAddCustomer.setText("Add Customer");
        btnAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCustomerActionPerformed(evt);
            }
        });

        btnUpdateCustomer.setBackground(new java.awt.Color(102, 108, 105));
        btnUpdateCustomer.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateCustomer.setText("Update Customer");
        btnUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCustomerActionPerformed(evt);
            }
        });

        btnDeleteCustomer.setBackground(new java.awt.Color(102, 108, 105));
        btnDeleteCustomer.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteCustomer.setText("Delete Customer");
        btnDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCustomerActionPerformed(evt);
            }
        });

        btnSearchCustomer.setBackground(new java.awt.Color(102, 108, 105));
        btnSearchCustomer.setText("Search");
        btnSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerActionPerformed(evt);
            }
        });

        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Email", "Phone number", "Gender"
            }
        ));
        tblCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCustomers);

        jScrollPane2.setViewportView(jScrollPane1);

        jLabel1.setText("Search:");

        txtSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCustomerActionPerformed(evt);
            }
        });
        txtSearchCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchCustomerKeyReleased(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(102, 108, 105));
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnGoToReservation.setBackground(new java.awt.Color(255, 127, 80));
        btnGoToReservation.setText("Go to ReservationPage");
        btnGoToReservation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnGoToReservationMouseEntered(evt);
            }
        });
        btnGoToReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToReservationActionPerformed(evt);
            }
        });

        btnGoToMain.setBackground(new java.awt.Color(255, 127, 80));
        btnGoToMain.setText("Go to Main");
        btnGoToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToMainActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\gh\\Documents\\NetBeansProjects\\RestaurantReservationAndOrderingSystem\\src\\Images\\customerr.png")); // NOI18N

        javax.swing.GroupLayout pnlCustomerLayout = new javax.swing.GroupLayout(pnlCustomer);
        pnlCustomer.setLayout(pnlCustomerLayout);
        pnlCustomerLayout.setHorizontalGroup(
            pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerLayout.createSequentialGroup()
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCustomerLayout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(lblCustomerTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCustomerLayout.createSequentialGroup()
                                    .addComponent(btnDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCustomerLayout.createSequentialGroup()
                                    .addComponent(btnAddCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnUpdateCustomer))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCustomerLayout.createSequentialGroup()
                                    .addComponent(lblCustomerGender, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbCustomerGender, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlCustomerLayout.createSequentialGroup()
                                    .addComponent(lblCustomerPhone)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlCustomerLayout.createSequentialGroup()
                                    .addComponent(lblCustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlCustomerLayout.createSequentialGroup()
                                    .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(48, 48, 48)
                                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCustomerLayout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(btnSearchCustomer))
                            .addGroup(pnlCustomerLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel1)
                                .addGap(31, 31, 31)
                                .addComponent(txtSearchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnGoToReservation)
                        .addGap(36, 36, 36)
                        .addComponent(btnGoToMain)))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        pnlCustomerLayout.setVerticalGroup(
            pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerName)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerEmail)
                    .addComponent(txtCustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCustomerPhone)
                    .addComponent(txtCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerGender)
                    .addComponent(cmbCustomerGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCustomer)
                    .addComponent(btnUpdateCustomer))
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearchCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addComponent(btnSearchCustomer)
                        .addGap(157, 157, 157))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteCustomer)
                            .addComponent(btnClear))
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(46, 46, 46)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGoToReservation)
                    .addComponent(btnGoToMain))
                .addGap(96, 96, 96))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void txtCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerNameActionPerformed

    private void btnAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCustomerActionPerformed
       if (!validateInputs()) {
    return; // Stop if validation fails
}
        try {
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ restaurant_ordering_system_db", "root", "gadiella");
        String sql = "INSERT INTO customers (name, phone, email, gender) VALUES (?, ?, ?, ?)";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, txtCustomerName.getText());
        pst.setString(2, txtCustomerPhone.getText());
        pst.setString(3, txtCustomerEmail.getText());
        pst.setString(4, cmbCustomerGender.getSelectedItem().toString());
        
        int inserted = pst.executeUpdate();
        if (inserted > 0) {
            JOptionPane.showMessageDialog(this, "Customer added successfully!");
            loadCustomerData(); // <-- refresh the table
            clearForm(); // <-- clear the input fields (optional)
        }
    } catch (Exception e) {
        e.printStackTrace();}}
        
        private boolean validateInputs() {
    String name = txtCustomerName.getText().trim();
    String phone = txtCustomerPhone.getText().trim();
    String email = txtCustomerEmail.getText().trim();
    String gender = (String) cmbCustomerGender.getSelectedItem();

    // Name Validation
    if (name.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the customer's name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    } else if (!name.matches("[a-zA-Z\\s]+")) {
        JOptionPane.showMessageDialog(this, "Name should contain only letters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Phone Validation
    if (phone.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the customer's phone number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    } else if (!phone.matches("\\d{10}")) {
        JOptionPane.showMessageDialog(this, "Phone number must be exactly 10 digits.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Email Validation
    if (email.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the customer's email.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    } else if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid email address.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Gender Validation
    if (gender == null || gender.equals("")) {
        JOptionPane.showMessageDialog(this, "Please select the customer's gender.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    return true; // All good!


        
    }//GEN-LAST:event_btnAddCustomerActionPerformed

    private void btnUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCustomerActionPerformed
        // TODO add your handling code here:
       if (!validateUpdateInputs()) {
    return; // Stop if validation fails
}
      int selectedRow = tblCustomers.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a customer to update.");
        return;
    }

    try {
        int customerId = (int) tblCustomers.getValueAt(selectedRow, 0);

        String name = txtCustomerName.getText();
        String phone = txtCustomerPhone.getText();
        String email = txtCustomerEmail.getText();
        String gender = (String) cmbCustomerGender.getSelectedItem();

        if (name.isEmpty() || phone.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name and phone cannot be empty!");
            return;
        }

        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_ordering_system_db", "root", "gadiella");
        String sql = "UPDATE customers SET name=?, phone=?, email=?, gender=? WHERE customer_id=?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, name);
        pst.setString(2, phone);
        pst.setString(3, email);
        pst.setString(4, gender);
        pst.setInt(5, customerId);

        int rowsAffected = pst.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Customer updated successfully!");
            loadCustomerData(); // reload after update
            clearForm(); // optional: clears fields
        } else {
            JOptionPane.showMessageDialog(this, "Update failed!");
        }

    } catch (Exception e) {
        e.printStackTrace();}}
   
      private boolean validateUpdateInputs() {
    String name = txtCustomerName.getText().trim();
    String phone = txtCustomerPhone.getText().trim();
    String email = txtCustomerEmail.getText().trim();
    String gender = (String) cmbCustomerGender.getSelectedItem();

    // Name Validation
    if (name.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the customer's name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    } else if (!name.matches("[a-zA-Z\\s]+")) {
        JOptionPane.showMessageDialog(this, "Name should contain only letters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Phone Validation
    if (phone.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the customer's phone number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    } else if (!phone.matches("\\d{10}")) {
        JOptionPane.showMessageDialog(this, "Phone number must be exactly 10 digits.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Email Validation
    if (email.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the customer's email.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    } else if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid email address.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Gender Validation
    if (gender == null || gender.equals("")) {
        JOptionPane.showMessageDialog(this, "Please select the customer's gender.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    return true; // All good!
    


    }//GEN-LAST:event_btnUpdateCustomerActionPerformed

    private void btnDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCustomerActionPerformed
        // TODO add your handling code here:
       int selectedRow = tblCustomers.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a customer to delete.");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this customer?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        int customerId = (int) tblCustomers.getValueAt(selectedRow, 0);

        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_ordering_system_db", "root", "gadiella");
        String sql = "DELETE FROM customers WHERE customer_id=?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setInt(1, customerId);

        int rowsAffected = pst.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Customer deleted successfully!");
            loadCustomerData(); // reload after delete
            clearForm(); // optional: clears fields
        } else {
            JOptionPane.showMessageDialog(this, "Delete failed!");
        }

    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnDeleteCustomerActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
         clearForm();
}

private void clearForm() {
    txtCustomerName.setText("");
    txtCustomerEmail.setText("");
    txtCustomerPhone.setText("");
    cmbCustomerGender.setSelectedIndex(0);
    tblCustomers.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtSearchCustomerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchCustomerKeyReleased
        // TODO add your handling code here:
         String searchText = txtSearchCustomer.getText();
    
    // TODO: Filter the table based on searchText
    // Example: Reload table data with WHERE name LIKE '%searchText%'
    }//GEN-LAST:event_txtSearchCustomerKeyReleased

    private void tblCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomersMouseClicked
        // TODO add your handling code here:
      int selectedRow = tblCustomers.getSelectedRow();
    if (selectedRow >= 0) {
        txtCustomerName.setText(tblCustomers.getValueAt(selectedRow, 1).toString());
        txtCustomerPhone.setText(tblCustomers.getValueAt(selectedRow, 2).toString());
        txtCustomerEmail.setText(tblCustomers.getValueAt(selectedRow, 3).toString());
        cmbCustomerGender.setSelectedItem(tblCustomers.getValueAt(selectedRow, 4).toString());
    }
    }//GEN-LAST:event_tblCustomersMouseClicked

    private void cmbCustomerGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCustomerGenderActionPerformed

    private void txtSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCustomerActionPerformed
        // TODO add your handling code here:
        String searchText = txtSearchCustomer.getText();
    loadCustomerData();

    }//GEN-LAST:event_txtSearchCustomerActionPerformed

    private void btnSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerActionPerformed
        // TODO add your handling code here:
         String keyword = txtSearchCustomer.getText().trim(); // get text from search field

    if (keyword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a name or phone or email to search.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        Connection con = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/restaurant_ordering_system_db", "root", "gadiella"
        );

        String sql = "SELECT * FROM customers WHERE name LIKE ? OR phone LIKE ? OR email LIKE ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, "%" + keyword + "%");
        pst.setString(2, "%" + keyword + "%");
        pst.setString(3, "%" + keyword + "%");

        ResultSet rs = pst.executeQuery();

        // Clear the customer table first
        DefaultTableModel model = (DefaultTableModel) tblCustomers.getModel();
        model.setRowCount(0);

        // Populate the table with search results
        while (rs.next()) {
            Object[] row = {
                rs.getInt("customer_id"),
                rs.getString("name"),
                rs.getString("phone"),
                rs.getString("email"),
                rs.getString("gender")
            };
            model.addRow(row);
        }

        con.close();

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching customers.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnSearchCustomerActionPerformed

    private void btnGoToReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToReservationActionPerformed
        // TODO add your handling code here:
        // Example for a button (e.g., btnGoToReservation)

      int choice = JOptionPane.showConfirmDialog(this, "Go to Reservation Page?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        ReservationPanel reservationFrame = new ReservationPanel();
        reservationFrame.setVisible(true);
        this.dispose(); // Close CustomerPanel
    }
    
    }//GEN-LAST:event_btnGoToReservationActionPerformed

    private void btnGoToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToMainActionPerformed
        // TODO add your handling code here:
          int choice = JOptionPane.showConfirmDialog(this, "Return to Main Menu?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        MainMenuFrame mainMenu = new MainMenuFrame(); // or MainMenuFrame(role) if needed
        mainMenu.setVisible(true);
        this.dispose(); // Close current panel
    }
    }//GEN-LAST:event_btnGoToMainActionPerformed

    private void btnGoToReservationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGoToReservationMouseEntered
        // TODO add your handling code here:
       
    }//GEN-LAST:event_btnGoToReservationMouseEntered
private String searchText = "";
    private void loadCustomerData() {
    try {
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_ordering_system_db", "root", "gadiella");
        PreparedStatement pst;

        if (searchText == null || searchText.trim().equals("")) {
            String sql = "SELECT customer_id, name, phone, email, gender FROM customers";
            pst = con.prepareStatement(sql);
        } else {
            String sql = "SELECT customer_id, name, phone, email, gender FROM customers WHERE name LIKE ? OR phone LIKE ? OR email LIKE ?";
            pst = con.prepareStatement(sql);
            String likeText = "%" + searchText + "%";
            pst.setString(1, likeText);
            pst.setString(2, likeText);
            pst.setString(3, likeText);
        }

        ResultSet rs = pst.executeQuery();
        
        DefaultTableModel model = (DefaultTableModel) tblCustomers.getModel();
        model.setRowCount(0);

        boolean hasData = false;

        while (rs.next()) {
            hasData = true;
            int id = rs.getInt("customer_id");
            String name = rs.getString("name");
            String phone = rs.getString("phone");
            String email = rs.getString("email");
            String gender = rs.getString("gender");

            model.addRow(new Object[]{id, name, phone, email, gender});
        }

        if (!hasData) {
            JOptionPane.showMessageDialog(this, "No matching records found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
   public List<Customers> getAllCustomers() {
    List<Customers> customers = new ArrayList<>();
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_ordering_system_db", "root", "gadiella")) {
        String sql = "SELECT * FROM customers";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            int id = rs.getInt("customer_id");
            String name = rs.getString("name");
            customers.add(new Customers(id, name));
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return customers;
}


 // Add customers to the list
    public void addCustomer(Customers customer) {
        customersList.add(customer);
    }
 

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CustomerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CustomerPanel().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCustomer;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDeleteCustomer;
    private javax.swing.JButton btnGoToMain;
    private javax.swing.JButton btnGoToReservation;
    private javax.swing.JButton btnSearchCustomer;
    private javax.swing.JButton btnUpdateCustomer;
    private javax.swing.JComboBox<String> cmbCustomerGender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCustomerEmail;
    private javax.swing.JLabel lblCustomerGender;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblCustomerPhone;
    private javax.swing.JLabel lblCustomerTitle;
    private javax.swing.JPanel pnlCustomer;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTextField txtCustomerEmail;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtCustomerPhone;
    private javax.swing.JTextField txtSearchCustomer;
    // End of variables declaration//GEN-END:variables
}
