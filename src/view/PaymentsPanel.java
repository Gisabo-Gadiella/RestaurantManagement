/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.OrdersDao;
import java.math.BigDecimal;
import java.sql.Timestamp;
import model.Payments;
import javax.swing.JOptionPane;
import dao.PaymentsDao;
import java.io.File;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.OrderComboItem;

/**
 *
 * @author Gisabo
 */
public class PaymentsPanel extends javax.swing.JFrame {

    /**
     * Creates new form PaymentsPanel
     */
    public PaymentsPanel() {
        initComponents();
        
    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        loadOrderIds(); // Load order IDs into ComboBox
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblOrderId = new javax.swing.JLabel();
        lblAmountPaid = new javax.swing.JLabel();
        lblPaymentMethod = new javax.swing.JLabel();
        lblPaymentStatus = new javax.swing.JLabel();
        cmbPaymentMethod = new javax.swing.JComboBox<>();
        cmbPaymentStatus = new javax.swing.JComboBox<>();
        txtAmountPaid = new javax.swing.JTextField();
        btnSavePayment = new javax.swing.JButton();
        cmbOrderId = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPayments = new javax.swing.JTable();
        lblFilterStatus = new javax.swing.JLabel();
        cmbFilterStatus = new javax.swing.JComboBox<>();
        btnLoadPayments = new javax.swing.JButton();
        btnDeletePayment = new javax.swing.JButton();
        btnUpdatePayment = new javax.swing.JButton();
        lblSearchOrder = new javax.swing.JLabel();
        txtSearchOrderId = new javax.swing.JTextField();
        btnSearchOrder = new javax.swing.JButton();
        blTotalAmount = new javax.swing.JLabel();
        btnExportToCSV = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        btnGoToMain = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(253, 253, 253));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("PAYMENT PANEL");

        lblOrderId.setText("Order ID");

        lblAmountPaid.setText("Amount Paid");

        lblPaymentMethod.setText("Payment Method");

        lblPaymentStatus.setText("Payment Status");

        cmbPaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Card", "MobileMoney", " " }));

        cmbPaymentStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paid", "Unpaid", " " }));

        txtAmountPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountPaidActionPerformed(evt);
            }
        });
        txtAmountPaid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAmountPaidKeyReleased(evt);
            }
        });

        btnSavePayment.setText("Save Payment");
        btnSavePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePaymentActionPerformed(evt);
            }
        });

        cmbOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderIdActionPerformed(evt);
            }
        });

        tblPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Payment Id", "Order Id", "Amount Paid", "Payment Method", "Payment Status", "Payment Date"
            }
        ));
        tblPayments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPaymentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPayments);

        lblFilterStatus.setText("Filter by Status");

        cmbFilterStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Paid", "Unpaid" }));

        btnLoadPayments.setText("Load Payments");
        btnLoadPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadPaymentsActionPerformed(evt);
            }
        });

        btnDeletePayment.setText("Delete Payment");
        btnDeletePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePaymentActionPerformed(evt);
            }
        });

        btnUpdatePayment.setText("Update Payment");
        btnUpdatePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePaymentActionPerformed(evt);
            }
        });

        lblSearchOrder.setText("Search Order Id");

        btnSearchOrder.setText("Search");
        btnSearchOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchOrderActionPerformed(evt);
            }
        });

        blTotalAmount.setText("Total Paid");

        btnExportToCSV.setText("Export To CSV");
        btnExportToCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToCSVActionPerformed(evt);
            }
        });

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        btnGoToMain.setText("Go To Main");
        btnGoToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToMainActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\gh\\Documents\\NetBeansProjects\\RestaurantReservationAndOrderingSystem\\src\\Images\\mobile-payment_6413549.png")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(blTotalAmount)
                .addGap(58, 58, 58)
                .addComponent(btnExportToCSV)
                .addGap(41, 41, 41)
                .addComponent(btnViewDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGoToMain)
                .addGap(86, 86, 86))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(67, 67, 67)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnSavePayment)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnDeletePayment)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnUpdatePayment)
                                                .addGap(48, 48, 48)
                                                .addComponent(btnLoadPayments))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(lblFilterStatus)
                                                .addGap(18, 18, 18)
                                                .addComponent(cmbFilterStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(115, 115, 115)
                                                .addComponent(lblSearchOrder)
                                                .addGap(26, 26, 26)
                                                .addComponent(txtSearchOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(27, 27, 27)
                                                .addComponent(btnSearchOrder))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(125, 125, 125)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrderId)
                            .addComponent(lblPaymentMethod)
                            .addComponent(lblPaymentStatus)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblAmountPaid)))
                        .addGap(72, 72, 72)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbOrderId, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtAmountPaid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderId)
                    .addComponent(cmbOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAmountPaid)
                    .addComponent(txtAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPaymentMethod)
                    .addComponent(cmbPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPaymentStatus)
                    .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSavePayment)
                    .addComponent(btnDeletePayment)
                    .addComponent(btnUpdatePayment)
                    .addComponent(btnLoadPayments))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFilterStatus)
                    .addComponent(cmbFilterStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchOrder)
                    .addComponent(txtSearchOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchOrder))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blTotalAmount)
                    .addComponent(btnExportToCSV)
                    .addComponent(btnViewDetails)
                    .addComponent(btnGoToMain))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSavePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePaymentActionPerformed
        // TODO add your handling code here:
            if (cmbOrderId.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select an Order.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (txtAmountPaid.getText().trim().isEmpty() || new BigDecimal(txtAmountPaid.getText()).compareTo(BigDecimal.ZERO) <= 0) {
        JOptionPane.showMessageDialog(this, "Amount Paid must be greater than 0.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (cmbPaymentMethod.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a Payment Method.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (cmbPaymentStatus.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a Payment Status.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
          try {
        // Get selected Order ID
        String selectedOrderIdStr = (String) cmbOrderId.getSelectedItem();
        if (selectedOrderIdStr == null || selectedOrderIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select an Order ID.");
            return;
        }
        int orderId = Integer.parseInt(selectedOrderIdStr);

        // Get entered Amount Paid
        String amountStr = txtAmountPaid.getText();
        if (amountStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the Amount Paid.");
            return;
        }
        BigDecimal amountPaid = new BigDecimal(amountStr);

        // Get selected Payment Method and Payment Status
        String paymentMethod = (String) cmbPaymentMethod.getSelectedItem();
        String paymentStatus = (String) cmbPaymentStatus.getSelectedItem();

        // Get current timestamp
        Timestamp paymentDate = new Timestamp(System.currentTimeMillis());

        // Create payment object
        Payments payment = new Payments();
        payment.setOrderId(orderId);
        payment.setAmountPaid(amountPaid);
        payment.setPaymentMethod(paymentMethod);
        payment.setPaymentStatus(paymentStatus);
        payment.setPaymentDate(paymentDate);

        // Save to database
        PaymentsDao dao = new PaymentsDao();
        int result = dao.addPayment(payment);

        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Payment saved successfully!");
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to save payment.");
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Please enter valid numeric values.");
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnSavePaymentActionPerformed

    private void cmbOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderIdActionPerformed
        // TODO add your handling code here:
      Object selectedObject = cmbOrderId.getSelectedItem();
    
    if (selectedObject != null) {
        try {
            int orderId = Integer.parseInt(selectedObject.toString());
            
            BigDecimal totalAmount = getOrderTotalAmount(orderId); // <--- Use only one method

            if (totalAmount != null) {
                txtAmountPaid.setText(totalAmount.toPlainString());
            } else {
                txtAmountPaid.setText(""); // Clear if not found
            }
        } catch (NumberFormatException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid Order ID selected!");
        }
    }
    }//GEN-LAST:event_cmbOrderIdActionPerformed

    private void txtAmountPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountPaidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountPaidActionPerformed

    private void txtAmountPaidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmountPaidKeyReleased
        // TODO add your handling code here:
         validateAmountPaid();
    }//GEN-LAST:event_txtAmountPaidKeyReleased

    private void btnLoadPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadPaymentsActionPerformed
        // TODO add your handling code here:
         String statusFilter = cmbFilterStatus.getSelectedItem().toString(); // Get selected filter
    
    PaymentsDao dao = new PaymentsDao();
    List<Payments> paymentList = dao.getAllPayments(statusFilter);
    
    DefaultTableModel model = (DefaultTableModel) tblPayments.getModel();
    model.setRowCount(0); // Clear previous rows

    for (Payments payment : paymentList) {
        model.addRow(new Object[]{
            payment.getPaymentId(),
            payment.getOrderId(),
            payment.getAmountPaid(),
            payment.getPaymentMethod(),
            payment.getPaymentStatus(),
            payment.getPaymentDate()
        });
    }
   
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblPayments.getModel());
            tblPayments.setRowSorter(sorter);

            // Sort by Payment Date column (assuming it's the 6th column, index 5)
            List<RowSorter.SortKey> sortKeys = new ArrayList<>();
            sortKeys.add(new RowSorter.SortKey(5, SortOrder.DESCENDING));
            sorter.setSortKeys(sortKeys);
            sorter.sort();
            updateTotalAmount();

    }//GEN-LAST:event_btnLoadPaymentsActionPerformed

    private void btnDeletePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePaymentActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblPayments.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a payment to delete.");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    int paymentId = (int) tblPayments.getValueAt(selectedRow, 0); // First column is Payment ID

    PaymentsDao dao = new PaymentsDao();
    int result = dao.deletePayment(paymentId);

    if (result > 0) {
        JOptionPane.showMessageDialog(this, "Payment deleted successfully.");
        btnLoadPaymentsActionPerformed(null); // Reload table
    } else {
        JOptionPane.showMessageDialog(this, "Failed to delete payment.");
    }
    }//GEN-LAST:event_btnDeletePaymentActionPerformed

    private void btnUpdatePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePaymentActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPayments.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a payment to update.");
        return;
    }

    try {
        int paymentId = (int) tblPayments.getValueAt(selectedRow, 0); // Payment ID
        int orderId = Integer.parseInt(cmbOrderId.getSelectedItem().toString());
        BigDecimal amountPaid = new BigDecimal(txtAmountPaid.getText());
        String paymentMethod = cmbPaymentMethod.getSelectedItem().toString();
        String paymentStatus = cmbPaymentStatus.getSelectedItem().toString();
        Timestamp paymentDate = new Timestamp(System.currentTimeMillis()); // Current time

        Payments payment = new Payments();
        payment.setPaymentId(paymentId);
        payment.setOrderId(orderId);
        payment.setAmountPaid(amountPaid);
        payment.setPaymentMethod(paymentMethod);
        payment.setPaymentStatus(paymentStatus);
        payment.setPaymentDate(paymentDate);

        PaymentsDao dao = new PaymentsDao();
        int result = dao.updatePayment(payment);

        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Payment updated successfully.");
            btnLoadPaymentsActionPerformed(null); // Reload table
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update payment.");
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    updateTotalAmount();

        
    }//GEN-LAST:event_btnUpdatePaymentActionPerformed

    private void tblPaymentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPaymentsMouseClicked
        // TODO add your handling code here:
         int selectedRow = tblPayments.getSelectedRow();
    if (selectedRow != -1) {
        cmbOrderId.setSelectedItem(tblPayments.getValueAt(selectedRow, 1).toString()); // Order ID
        txtAmountPaid.setText(tblPayments.getValueAt(selectedRow, 2).toString()); // Amount Paid
        cmbPaymentMethod.setSelectedItem(tblPayments.getValueAt(selectedRow, 3).toString()); // Payment Method
        cmbPaymentStatus.setSelectedItem(tblPayments.getValueAt(selectedRow, 4).toString()); // Payment Status
    }
    }//GEN-LAST:event_tblPaymentsMouseClicked

    private void btnSearchOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchOrderActionPerformed
        // TODO add your handling code here:
         String searchOrderId = txtSearchOrderId.getText().trim();
    if (searchOrderId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter an Order ID to search.");
        return;
    }

    try {
        int orderId = Integer.parseInt(searchOrderId);

        PaymentsDao dao = new PaymentsDao();
        Payments payment = dao.getPaymentByOrderId(orderId);

        DefaultTableModel model = (DefaultTableModel) tblPayments.getModel();
        model.setRowCount(0); // Clear table first

        if (payment != null) {
            model.addRow(new Object[]{
                payment.getPaymentId(),
                payment.getOrderId(),
                payment.getAmountPaid(),
                payment.getPaymentMethod(),
                payment.getPaymentStatus(),
                payment.getPaymentDate()
            });
        } else {
            JOptionPane.showMessageDialog(this, "No payment found for Order ID: " + orderId);
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Order ID must be a number.");
    }
    updateTotalAmount();

    }//GEN-LAST:event_btnSearchOrderActionPerformed

    private void btnExportToCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToCSVActionPerformed
        // TODO add your handling code here:
        try {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (PrintWriter pw = new PrintWriter(file)) {
                // Header
                for (int i = 0; i < tblPayments.getColumnCount(); i++) {
                    pw.print(tblPayments.getColumnName(i));
                    if (i < tblPayments.getColumnCount() - 1) pw.print(",");
                }
                pw.println();
                // Data
                for (int row = 0; row < tblPayments.getRowCount(); row++) {
                    for (int col = 0; col < tblPayments.getColumnCount(); col++) {
                        pw.print(tblPayments.getValueAt(row, col));
                        if (col < tblPayments.getColumnCount() - 1) pw.print(",");
                    }
                    pw.println();
                }
            }
            JOptionPane.showMessageDialog(this, "Exported successfully!");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error exporting file.");
    }
    }//GEN-LAST:event_btnExportToCSVActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblPayments.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a payment first!");
        return;
    }

    StringBuilder details = new StringBuilder();
    for (int i = 0; i < tblPayments.getColumnCount(); i++) {
        String columnName = tblPayments.getColumnName(i);
        Object value = tblPayments.getValueAt(selectedRow, i);
        details.append(columnName).append(": ").append(value).append("\n");
    }

    JOptionPane.showMessageDialog(this, details.toString(), "Payment Details", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnGoToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToMainActionPerformed
        // TODO add your handling code here:
          int choice = JOptionPane.showConfirmDialog(this, "Return to Main Menu?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        MainMenuFrame mainMenu = new MainMenuFrame(); // or MainMenuFrame(role) if needed
        mainMenu.setVisible(true);
        this.dispose(); // Close current panel
    }
    }//GEN-LAST:event_btnGoToMainActionPerformed
        
    private BigDecimal getOrderTotalAmount(int orderId) {
    BigDecimal totalAmount = null;
    String sql = "SELECT SUM(quantity * price) AS total FROM order_items JOIN menu_items ON order_items.item_id = menu_items.item_id WHERE order_items.order_id = ?";
    
    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_ordering_system_db", "root", "gadiella");
         PreparedStatement pst = con.prepareStatement(sql)) {
        
        pst.setInt(1, orderId);
        ResultSet rs = pst.executeQuery();
        
        if (rs.next()) {
            totalAmount = rs.getBigDecimal("total");
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    
    return totalAmount;
}

    
    
    private void validateAmountPaid() {
    String text = txtAmountPaid.getText().trim();

    try {
        if (!text.isEmpty()) {
            new BigDecimal(text); // Try parsing to BigDecimal
            btnSavePayment.setEnabled(true); // Valid amount -> enable Save
        } else {
            btnSavePayment.setEnabled(false); // Empty -> disable Save
        }
    } catch (NumberFormatException ex) {
        btnSavePayment.setEnabled(false); // Invalid -> disable Save
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric amount!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void updateTotalAmount() {
    BigDecimal total = BigDecimal.ZERO;
    for (int i = 0; i < tblPayments.getRowCount(); i++) {
        BigDecimal amount = new BigDecimal(tblPayments.getValueAt(i, 2).toString());
        total = total.add(amount);
    }
    blTotalAmount.setText("Total Paid: $" + total.toString());
}


    
    private void loadOrderIds() {
        cmbOrderId.removeAllItems();



   
    OrdersDao dao = new OrdersDao();
    List<Integer> orderIds = dao.getAllOrderIds();

    for (Integer id : orderIds) {
        cmbOrderId.addItem(String.valueOf(id)); // Add as String
    }
    
     if (orderIds.isEmpty()) {
        btnSavePayment.setEnabled(false); // Disable Save if no orders
    } else {
        for (Integer id : orderIds) {
            cmbOrderId.addItem(String.valueOf(id));
        }
        btnSavePayment.setEnabled(true); // Enable Save if orders exist
    }
}

      private void clearForm() {
    cmbOrderId.setSelectedIndex(-1); // Clear selection
    txtAmountPaid.setText("");
    cmbPaymentMethod.setSelectedIndex(0);
    cmbPaymentStatus.setSelectedIndex(0);
}



    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PaymentsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PaymentsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PaymentsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PaymentsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PaymentsPanel().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blTotalAmount;
    private javax.swing.JButton btnDeletePayment;
    private javax.swing.JButton btnExportToCSV;
    private javax.swing.JButton btnGoToMain;
    private javax.swing.JButton btnLoadPayments;
    private javax.swing.JButton btnSavePayment;
    private javax.swing.JButton btnSearchOrder;
    private javax.swing.JButton btnUpdatePayment;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JComboBox<String> cmbFilterStatus;
    private javax.swing.JComboBox<String> cmbOrderId;
    private javax.swing.JComboBox<String> cmbPaymentMethod;
    private javax.swing.JComboBox<String> cmbPaymentStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAmountPaid;
    private javax.swing.JLabel lblFilterStatus;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblPaymentMethod;
    private javax.swing.JLabel lblPaymentStatus;
    private javax.swing.JLabel lblSearchOrder;
    private javax.swing.JTable tblPayments;
    private javax.swing.JTextField txtAmountPaid;
    private javax.swing.JTextField txtSearchOrderId;
    // End of variables declaration//GEN-END:variables
}
