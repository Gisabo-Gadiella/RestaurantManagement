/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.MenuItemsDao;
import dao.OrderItemsDao;
import dao.OrdersDao;
import java.awt.MenuItem;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ComboItem;
import model.MenuItems;
import model.OrderItems;
import model.Orders;

/**
 *
 * @author Gisabo
 */
public class OrderItemsPanel extends javax.swing.JFrame {

    /**
     * Creates new form OrderItemsPanel
     */
  
    // Maps to help you lookup
private Map<String, Integer> itemMap = new HashMap<>(); // ItemName -> ItemId
private Map<Integer, String> orderMap = new HashMap<>(); // OrderId -> OrderName

    
   private MenuItemsDao menuItemsDao = new MenuItemsDao();
private OrdersDao ordersDao = new OrdersDao();



    public OrderItemsPanel() {
        
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        
        loadItemsCombo();
loadOrdersCombo();
loadOrderItems();

        fillOrderComboBox();
    fillItemComboBox();
    loadOrderItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblOrderId = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblOrderItems = new javax.swing.JTable();
        btnSearchOrderItems = new javax.swing.JButton();
        txtOrderIdSearch = new javax.swing.JTextField();
        cmbOrderId = new javax.swing.JComboBox<>();
        lblItemId = new javax.swing.JLabel();
        cmbItemId = new javax.swing.JComboBox<>();
        btnAddItem = new javax.swing.JButton();
        btnUpdateItem = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();
        btnLoadItems = new javax.swing.JButton();
        txtOrderItemId = new javax.swing.JTextField();
        lblOrderItemId = new javax.swing.JLabel();
        btnGoToPayments = new javax.swing.JButton();
        GoToMain = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        jPanel1.setBackground(new java.awt.Color(204, 216, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("ORDER ITEMS MANAGEMENT");

        lblOrderId.setText("Order Id");

        lblQuantity.setText("Quantity");

        tblOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OrderItem ID", "Item ID", "Quantity", "Order ID"
            }
        ));
        tblOrderItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderItemsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblOrderItems);

        btnSearchOrderItems.setText("Search");
        btnSearchOrderItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchOrderItemsActionPerformed(evt);
            }
        });

        cmbOrderId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblItemId.setText("Item Id");

        cmbItemId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbItemId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemIdActionPerformed(evt);
            }
        });

        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnUpdateItem.setText("Update Item");
        btnUpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateItemActionPerformed(evt);
            }
        });

        btnDeleteItem.setText("Delete Item");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnLoadItems.setText("Load Items");

        lblOrderItemId.setText("OrderItem Id");

        btnGoToPayments.setText("Go to Payments");
        btnGoToPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToPaymentsActionPerformed(evt);
            }
        });

        GoToMain.setText("Go to Main Page");
        GoToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoToMainActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\gh\\Documents\\NetBeansProjects\\RestaurantReservationAndOrderingSystem\\src\\Images\\online-order_6300197.png")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrderItemId)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblItemId)
                                        .addComponent(lblQuantity)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOrderItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnLoadItems)
                                .addGap(40, 40, 40)
                                .addComponent(btnAddItem)
                                .addGap(56, 56, 56)
                                .addComponent(btnUpdateItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(24, 24, 24)
                        .addComponent(btnDeleteItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)))
                .addComponent(txtOrderIdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchOrderItems)
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnGoToPayments)
                        .addGap(30, 30, 30)
                        .addComponent(GoToMain)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(346, 346, 346))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtOrderIdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchOrderItems))))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrderItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOrderItemId))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderId)
                    .addComponent(cmbOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(lblItemId))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(cmbItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadItems)
                    .addComponent(btnAddItem)
                    .addComponent(btnUpdateItem)
                    .addComponent(btnDeleteItem))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(btnGoToPayments))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(GoToMain)))
                .addContainerGap(133, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        // TODO add your handling code here:
         if (cmbOrderId.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select an Order.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (cmbItemId.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a Menu Item.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (txtQuantity.getText().trim().isEmpty() || !txtQuantity.getText().matches("\\d+") || Integer.parseInt(txtQuantity.getText()) <= 0) {
        JOptionPane.showMessageDialog(this, "Quantity must be a positive number.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

        
        try {
        OrderItems orderItem = new OrderItems();
        
        int orderIndex = cmbOrderId.getSelectedIndex();
        int itemIndex = cmbItemId.getSelectedIndex();
        
        int orderId = (int) orderMap.keySet().toArray()[orderIndex];
        int itemId = (int) menuItemMap.keySet().toArray()[itemIndex];
        
        int quantity = Integer.parseInt(txtQuantity.getText());

        orderItem.setOrderId(orderId);
        orderItem.setItemId(itemId);
        orderItem.setQuantity(quantity);

        OrderItemsDao dao = new OrderItemsDao();
        if (dao.addOrderItem(orderItem) > 0) {
            JOptionPane.showMessageDialog(this, "Order Item Added Successfully!");
            loadOrderItems();
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to Add Order Item!");
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }


    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnSearchOrderItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchOrderItemsActionPerformed
        // TODO add your handling code here:
        String keyword = txtOrderIdSearch.getText().trim();
    
    if (!keyword.isEmpty()) {
        DefaultTableModel model = (DefaultTableModel) tblOrderItems.getModel();
        model.setRowCount(0);

        OrderItemsDao dao = new OrderItemsDao();
        List<OrderItems> list = dao.searchOrderItemsByItemName(keyword);

        for (OrderItems item : list) {
            model.addRow(new Object[]{
                item.getOrderItemId(),
                orderMap.get(item.getOrderId()),
                menuItemMap.get(item.getItemId()),
                item.getQuantity()
            });
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please enter search text.");
    }
    }//GEN-LAST:event_btnSearchOrderItemsActionPerformed

    private void btnUpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateItemActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrderItems.getSelectedRow();
    if (selectedRow >= 0) {
        try {
            OrderItems orderItem = new OrderItems();
            
            int orderItemId = (int) tblOrderItems.getValueAt(selectedRow, 0);
            orderItem.setOrderItemId(orderItemId);

            int orderIndex = cmbOrderId.getSelectedIndex();
            int itemIndex = cmbItemId.getSelectedIndex();
            
            int orderId = (int) orderMap.keySet().toArray()[orderIndex];
            int itemId = (int) menuItemMap.keySet().toArray()[itemIndex];
            
            int quantity = Integer.parseInt(txtQuantity.getText());

            orderItem.setOrderId(orderId);
            orderItem.setItemId(itemId);
            orderItem.setQuantity(quantity);

            OrderItemsDao dao = new OrderItemsDao();
            if (dao.updateOrderItem(orderItem) > 0) {
                JOptionPane.showMessageDialog(this, "Order Item Updated Successfully!");
                loadOrderItems();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Update Order Item!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to update!");
    }
    }//GEN-LAST:event_btnUpdateItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrderItems.getSelectedRow();
    if (selectedRow >= 0) {
        int orderItemId = (int) tblOrderItems.getValueAt(selectedRow, 0);
        OrderItemsDao dao = new OrderItemsDao();
        if (dao.deleteOrderItem(orderItemId) > 0) {
            JOptionPane.showMessageDialog(this, "Order Item Deleted Successfully!");
            loadOrderItems();
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to Delete Order Item!");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete!");
    }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void cmbItemIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemIdActionPerformed
        // TODO add your handling code here:
         JComboBox combo = (JComboBox) cmbItemId;
combo.removeAllItems();

MenuItemsDao menuDao = new MenuItemsDao();
List<MenuItems> menuItems = menuDao.getAllMenuItems();

for (MenuItems item : menuItems) {
    combo.addItem(new ComboItem(item.getItemId(), item.getName()));
}


    }//GEN-LAST:event_cmbItemIdActionPerformed

    private void tblOrderItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderItemsMouseClicked
        // TODO add your handling code here:
     
    int selectedRow = tblOrderItems.getSelectedRow();
    if (selectedRow != -1) {
        // Get values from the table
        Integer orderItemId = (Integer) tblOrderItems.getValueAt(selectedRow, 0); // ID
        
    if (selectedRow != -1) {
        // 0 = order_item_id, 1 = item_name, 2 = quantity, 3 = order_name
        
        // Set item name into combo box
        String itemName = (String) tblOrderItems.getValueAt(selectedRow, 1);
        cmbItemId.setSelectedItem(itemName);
      
        Integer quantity = (Integer) tblOrderItems.getValueAt(selectedRow, 2);    // Quantity
        String orderName = (String) tblOrderItems.getValueAt(selectedRow, 3);     // Order Name

        // Set fields
        txtOrderItemId.setText(String.valueOf(orderItemId));
        txtQuantity.setText(String.valueOf(quantity)); // <-- here changed to setText()

        // Set item combobox
        if (itemName != null) {
            cmbItemId.setSelectedItem(itemName); // combo holds item names
        }

        // Set order combobox
        if (orderName != null) {
            cmbOrderId.setSelectedItem(orderName); // combo holds order names
        }
    
    }}
    }//GEN-LAST:event_tblOrderItemsMouseClicked

    private void GoToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoToMainActionPerformed
        // TODO add your handling code here:
          int choice = JOptionPane.showConfirmDialog(this, "Return to Main Menu?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        MainMenuFrame mainMenu = new MainMenuFrame(); // or MainMenuFrame(role) if needed
        mainMenu.setVisible(true);
        this.dispose(); // Close current panel
    }
    }//GEN-LAST:event_GoToMainActionPerformed

    private void btnGoToPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToPaymentsActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(this, "Go to Payments Page?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        PaymentsPanel paymentsFrame = new PaymentsPanel();
        paymentsFrame.setVisible(true);
        this.dispose();
    }
    }//GEN-LAST:event_btnGoToPaymentsActionPerformed

    /**
     * @param args the command line arguments
     */

    private void loadOrderItems() {
    OrderItemsDao orderItemsDao = new OrderItemsDao();
    List<OrderItems> orderItemsList = orderItemsDao.getAllOrderItems();

    DefaultTableModel model = (DefaultTableModel) tblOrderItems.getModel();
    model.setRowCount(0); // Clear existing rows
       
    for (OrderItems orderItem : orderItemsList) {
        Integer itemId = orderItem.getItemId();
        String itemName = "Unknown";

        // Find the item name using itemMap (itemName -> itemId map)
        for (Map.Entry<String, Integer> entry : itemMap.entrySet()) {
            if (entry.getValue().equals(itemId)) {
                itemName = entry.getKey();
                break;
            }
        }

        Integer orderId = orderItem.getOrderId();
        String orderName = orderMap.get(orderItem.getOrderId());
if (orderName == null) {
    orderName = "Order#" + orderItem.getOrderId(); // fallback if not found
}

      

        model.addRow(new Object[]{
            orderItem.getOrderItemId(), // 0: OrderItemID
            itemName,                   // 1: ItemName
            orderItem.getQuantity(),    // 2: Quantity
            orderName                   // 3: OrderName
        });
    }
}


    
    
private void loadItemsCombo() {
    MenuItemsDao menuItemsDao = new MenuItemsDao();
    List<MenuItems> itemList = menuItemsDao.getAllMenuItems();
    cmbItemId.removeAllItems();
    itemMap.clear();

    for (MenuItems item : itemList) {
        cmbItemId.addItem(item.getName()); // Combo shows names
        itemMap.put(item.getName(), item.getItemId()); // Map name -> id
    }
}

private void loadOrdersCombo() {
    OrdersDao ordersDao = new OrdersDao();
    List<Orders> orderList = ordersDao.getAllOrders();
    cmbOrderId.removeAllItems();
    orderMap.clear();

    for (Orders order : orderList) {
        String orderName = "Order#" + order.getOrderId();
        cmbOrderId.addItem(orderName); // Combo shows "Order#1" etc.
        orderMap.put(order.getOrderId(), orderName); // Map id -> name
    }
}






    

private void fillOrderComboBox() {
    orderMap.clear();
    cmbOrderId.removeAllItems();
    
    OrdersDao ordersDao = new OrdersDao();
    List<Orders> orders = ordersDao.getAllOrders();
    
    for (Orders order : orders) {
        String display = "Order #" + order.getOrderId();
        orderMap.put(order.getOrderId(), display);
        cmbOrderId.addItem(display);
    }
}

     private void clearForm() {
    cmbOrderId.setSelectedIndex(-1);
    cmbItemId.setSelectedIndex(-1);
    txtQuantity.setText("");
}

    

    private HashMap<Integer, String> menuItemMap = new HashMap<>();

private void fillItemComboBox() {
    menuItemMap.clear();
    cmbItemId.removeAllItems();
    
    MenuItemsDao menuItemsDao = new MenuItemsDao();
    List<MenuItems> items = menuItemsDao.getAllMenuItems();
    
    for (MenuItems item : items) {
        menuItemMap.put(item.getItemId(), item.getName());
        cmbItemId.addItem(item.getName());
    }
}




//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(OrderItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(OrderItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(OrderItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(OrderItemsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new OrderItemsPanel().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GoToMain;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnGoToPayments;
    private javax.swing.JButton btnLoadItems;
    private javax.swing.JButton btnSearchOrderItems;
    private javax.swing.JButton btnUpdateItem;
    private javax.swing.JComboBox<String> cmbItemId;
    private javax.swing.JComboBox<String> cmbOrderId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblItemId;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblOrderItemId;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JTable tblOrderItems;
    private javax.swing.JTextField txtOrderIdSearch;
    private javax.swing.JTextField txtOrderItemId;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
